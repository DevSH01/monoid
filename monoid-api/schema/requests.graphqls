type MonoidRecordResponse {
    data: String! 
    SchemaGroup: String
    SchemaName: String! 
}

input CreateUserPrimaryKeyInput {
    name: String! 
}

input UpdateUserPrimaryKeyInput {
    id: ID! 
    name: String! 
}

input UserDataRequestInput {
    primaryKeys: [UserPrimaryKeyInput!]
    workspaceId: ID!
    type: String!
}

input UserPrimaryKeyInput {
    UserPrimaryKeyId: ID! 
    Value: String! 
}

type UserPrimaryKey {
    id: ID! 
    name: String! 
    properties: [Property!]
}

type PrimaryKeyValue {
    id: ID! 
    userPrimaryKey: UserPrimaryKey! 
    request: Request! 
    value: String! 
}

type Request {
    id: ID! 
    primaryKeyValues: [PrimaryKeyValue!]
    requestStatuses: [RequestStatus!]
}

type RequestStatus {
    id: ID! 
    request: Request! 
    dataSource: DataSource! 
    status: String! 
}

extend type Query {
    userPrimaryKey(id: ID!): UserPrimaryKey
    request(id: ID!): Request 
    requestStatus(id: ID!): RequestStatus 
    primaryKeyValue(id: ID!): PrimaryKeyValue

}

extend type Mutation {
    createUserPrimaryKey(input: CreateUserPrimaryKeyInput!): UserPrimaryKey
    updateUserPrimaryKey(input: UpdateUserPrimaryKeyInput!): UserPrimaryKey
    deleteUserPrimaryKey(id: ID!): ID


    createUserDataRequest(input: UserDataRequestInput): Request
    executeUserDataRequest(requestId: ID!): [MonoidRecordResponse!]
}