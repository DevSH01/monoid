enum DiscoveryType {
    DATA_SOURCE_MISSING
    DATA_SOURCE_FOUND
    PROPERTY_FOUND
    PROPERTY_MISSING
    CATEGORY_FOUND
}

enum DiscoveryStatus {
    OPEN
    ACCEPTED
    REJECTED
}

type NewDataSourceDiscovery {
    name: String!
    group: String
    properties: [NewPropertyDiscovery]
}

type NewPropertyDiscovery {
    name: String!
    categories: [NewCategoryDiscovery]
    dataSourceId: String
    dataSource: DataSource
}

type NewCategoryDiscovery {
    propertyId: String
    categoryId: String!
    category: Category!
    property: Property
}

type PropertyMissingDiscovery {
    id: String!
    property: Property
}

type DataSourceMissingDiscovery {
    id: String!
    dataSource: DataSource
}

union DataDiscoveryData = NewDataSourceDiscovery | NewPropertyDiscovery |
    NewCategoryDiscovery | PropertyMissingDiscovery |
    DataSourceMissingDiscovery

type DataDiscovery {
    id: ID!
    type: DiscoveryType!
    status: DiscoveryStatus!
    data: DataDiscoveryData!

    createdAt: Time!
}

type DataDiscoveriesListResult {
    discoveries: [DataDiscovery]
    numDiscoveries: Int!
}

extend type SiloDefinition {
    discoveries(statuses: [DiscoveryStatus], limit: Int!, offset: Int!): DataDiscoveriesListResult!
}

enum DiscoveryAction {
    ACCEPT
    REJECT
}

input HandleDiscoveryInput {
    discoveryId: ID!
    action: DiscoveryAction!
}

input HandleAllDiscoveriesInput {
    siloId: ID!
    action: DiscoveryAction!
}

extend type Mutation {
    handleDiscovery(input: HandleDiscoveryInput): DataDiscovery
    handleAllOpenDiscoveries(input: HandleAllDiscoveriesInput): [DataDiscovery]
}