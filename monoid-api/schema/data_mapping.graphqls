# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type DataSource { 
    id: ID! 
    siloDefinition: SiloDefinition! 
    properties: [Property!]
    description: String 
    schema: String!
}

type Property { 
    id: ID! 
    categories: [Category!]
    dataSource: DataSource! 
    purposes: [Purpose!]
}

type SiloDefinition { 
    id: ID! 
    description: String 
    siloSpecification: SiloSpecification
    dataSources: [DataSource!]
    subjects: [Subject!]
}

type SiloSpecification {
    id: ID! 
    name: String! 
    logoUrl: String
    dockerImage: String!
    schema: String
}

type Subject {
    id: ID! 
    name: String!
}

type Category { 
    id: ID! 
    name: String! 
}

type Purpose { 
    id: ID! 
    name: String!
}

input CreateSiloDefinitionInput { 
    description: String 
    siloSpecificationID: ID!
    workspaceID: ID! 
    subjectIDs: [ID!]
}

input CreateSiloSpecificationInput { 
    name: String! 
    workspaceID: ID!
    logoURL: String
    dockerImage: String! 
    schema: String 
}

input CreateDataSourceInput {
    siloDefinitionID: ID! 
    description: String
    schema: String!
    propertyIDs: [ID!]
}

input UpdateSiloDefinitionInput { 
    id: ID! 
    description: String 
    siloSpecificationID: ID
    subjectIDs: [ID!]
}

input UpdateSiloSpecificationInput {
    id: ID! 
    dockerImage: String 
    schema: String
    name: String
    logoUrl: String
}

input UpdateDataSourceInput {
    id: ID! 
    description: String 
    schema: String
}

input CreatePropertyInput {
    categoryIDs: [ID!]
    dataSourceID: ID! 
    purposeIDs: [ID!]
}

input UpdatePropertyInput {
    id: ID!
    categoryIDs: [ID!]
    purposeIDs: [ID!]
}

input CreatePurposeInput {
    name: String! 
    workspaceID: ID! 
}

input CreateCategoryInput {
    name: String! 
    workspaceID: ID! 
}

input CreateSubjectInput {
    name: String! 
    workspaceID: ID! 
}

input UpdatePurposeInput {
    name: String
}

input UpdateCategoryInput {
    name: String
}

input UpdateSubjectInput {
    name: String
}

extend type Query {
    siloDefinition(id: ID!): SiloDefinition
    dataSource(id: ID!): DataSource
    siloSpecification(id: ID!): SiloSpecification 
    siloSpecifications: [SiloSpecification!]
    purposes: [Purpose!]
    categories: [Category!]
    subjects: [Subject!]
    purpose(id: ID!): Purpose
    category(id: ID!): Category
    subject(id: ID!): Subject
    property(id: ID!): Property
}

extend type Mutation { 
    createSiloDefinition(input: CreateSiloDefinitionInput): SiloDefinition
    createDataSource(input: CreateDataSourceInput): DataSource
    createSiloSpecification(input: CreateSiloSpecificationInput): SiloSpecification
    createProperty(input: CreatePropertyInput): Property
    createPurpose(input: CreatePurposeInput): Purpose 
    createCategory(input: CreateCategoryInput): Category
    createSubject(input: CreateSubjectInput): Subject

    updateSiloDefinition(input: UpdateSiloDefinitionInput): SiloDefinition
    updateDataSource(input: UpdateDataSourceInput): DataSource 
    updateSiloSpecification(input: UpdateSiloSpecificationInput): SiloSpecification
    updateProperty(input: UpdatePropertyInput): Property
    updatePurpose(input: UpdatePurposeInput): Purpose 
    updateCategory(input: UpdateCategoryInput): Category
    updateSubject(input: UpdateSubjectInput): Subject

    deleteSiloDefinition(id: ID!): ID 
    deleteDataSource(id: ID!): ID 
    deleteSiloSpecification(id: ID!): ID 
    deleteProperty(id: ID!): ID
    deletePurpose(id: ID!): ID
    deleteCategory(id: ID!): ID
    deleteSubject(id: ID!): ID
}