// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	monoidprotocol "github.com/monoid-privacy/monoid/monoidprotocol"
	gomock "github.com/golang/mock/gomock"
)

// MockMonoidProtocolFactory is a mock of MonoidProtocolFactory interface.
type MockMonoidProtocolFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMonoidProtocolFactoryMockRecorder
}

// MockMonoidProtocolFactoryMockRecorder is the mock recorder for MockMonoidProtocolFactory.
type MockMonoidProtocolFactoryMockRecorder struct {
	mock *MockMonoidProtocolFactory
}

// NewMockMonoidProtocolFactory creates a new mock instance.
func NewMockMonoidProtocolFactory(ctrl *gomock.Controller) *MockMonoidProtocolFactory {
	mock := &MockMonoidProtocolFactory{ctrl: ctrl}
	mock.recorder = &MockMonoidProtocolFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonoidProtocolFactory) EXPECT() *MockMonoidProtocolFactoryMockRecorder {
	return m.recorder
}

// NewMonoidProtocol mocks base method.
func (m *MockMonoidProtocolFactory) NewMonoidProtocol(image, tag, persistDir string) (monoidprotocol.MonoidProtocol, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMonoidProtocol", image, tag, persistDir)
	ret0, _ := ret[0].(monoidprotocol.MonoidProtocol)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMonoidProtocol indicates an expected call of NewMonoidProtocol.
func (mr *MockMonoidProtocolFactoryMockRecorder) NewMonoidProtocol(image, tag, persistDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMonoidProtocol", reflect.TypeOf((*MockMonoidProtocolFactory)(nil).NewMonoidProtocol), image, tag, persistDir)
}

// MockMonoidProtocol is a mock of MonoidProtocol interface.
type MockMonoidProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockMonoidProtocolMockRecorder
}

// MockMonoidProtocolMockRecorder is the mock recorder for MockMonoidProtocol.
type MockMonoidProtocolMockRecorder struct {
	mock *MockMonoidProtocol
}

// NewMockMonoidProtocol creates a new mock instance.
func NewMockMonoidProtocol(ctrl *gomock.Controller) *MockMonoidProtocol {
	mock := &MockMonoidProtocol{ctrl: ctrl}
	mock.recorder = &MockMonoidProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonoidProtocol) EXPECT() *MockMonoidProtocolMockRecorder {
	return m.recorder
}

// AttachLogs mocks base method.
func (m *MockMonoidProtocol) AttachLogs(ctx context.Context) (chan monoidprotocol.MonoidLogMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachLogs", ctx)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidLogMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachLogs indicates an expected call of AttachLogs.
func (mr *MockMonoidProtocolMockRecorder) AttachLogs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachLogs", reflect.TypeOf((*MockMonoidProtocol)(nil).AttachLogs), ctx)
}

// Delete mocks base method.
func (m *MockMonoidProtocol) Delete(ctx context.Context, config map[string]interface{}, query monoidprotocol.MonoidQuery) (chan monoidprotocol.MonoidRequestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, config, query)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidRequestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMonoidProtocolMockRecorder) Delete(ctx, config, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMonoidProtocol)(nil).Delete), ctx, config, query)
}

// InitConn mocks base method.
func (m *MockMonoidProtocol) InitConn(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitConn", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitConn indicates an expected call of InitConn.
func (mr *MockMonoidProtocolMockRecorder) InitConn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitConn", reflect.TypeOf((*MockMonoidProtocol)(nil).InitConn), ctx)
}

// Query mocks base method.
func (m *MockMonoidProtocol) Query(ctx context.Context, config map[string]interface{}, query monoidprotocol.MonoidQuery) (chan monoidprotocol.MonoidRequestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, config, query)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidRequestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockMonoidProtocolMockRecorder) Query(ctx, config, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockMonoidProtocol)(nil).Query), ctx, config, query)
}

// RequestResults mocks base method.
func (m *MockMonoidProtocol) RequestResults(ctx context.Context, config map[string]interface{}, requests monoidprotocol.MonoidRequestsMessage) (chan monoidprotocol.MonoidRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestResults", ctx, config, requests)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestResults indicates an expected call of RequestResults.
func (mr *MockMonoidProtocolMockRecorder) RequestResults(ctx, config, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestResults", reflect.TypeOf((*MockMonoidProtocol)(nil).RequestResults), ctx, config, requests)
}

// RequestStatus mocks base method.
func (m *MockMonoidProtocol) RequestStatus(ctx context.Context, config map[string]interface{}, requests monoidprotocol.MonoidRequestsMessage) (chan monoidprotocol.MonoidRequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestStatus", ctx, config, requests)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidRequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestStatus indicates an expected call of RequestStatus.
func (mr *MockMonoidProtocolMockRecorder) RequestStatus(ctx, config, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestStatus", reflect.TypeOf((*MockMonoidProtocol)(nil).RequestStatus), ctx, config, requests)
}

// Scan mocks base method.
func (m *MockMonoidProtocol) Scan(ctx context.Context, config map[string]interface{}, schemas monoidprotocol.MonoidSchemasMessage) (chan monoidprotocol.MonoidRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, config, schemas)
	ret0, _ := ret[0].(chan monoidprotocol.MonoidRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockMonoidProtocolMockRecorder) Scan(ctx, config, schemas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockMonoidProtocol)(nil).Scan), ctx, config, schemas)
}

// Schema mocks base method.
func (m *MockMonoidProtocol) Schema(ctx context.Context, config map[string]interface{}) (*monoidprotocol.MonoidSchemasMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema", ctx, config)
	ret0, _ := ret[0].(*monoidprotocol.MonoidSchemasMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Schema indicates an expected call of Schema.
func (mr *MockMonoidProtocolMockRecorder) Schema(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockMonoidProtocol)(nil).Schema), ctx, config)
}

// Spec mocks base method.
func (m *MockMonoidProtocol) Spec(ctx context.Context) (*monoidprotocol.MonoidSiloSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec", ctx)
	ret0, _ := ret[0].(*monoidprotocol.MonoidSiloSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spec indicates an expected call of Spec.
func (mr *MockMonoidProtocolMockRecorder) Spec(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockMonoidProtocol)(nil).Spec), ctx)
}

// Teardown mocks base method.
func (m *MockMonoidProtocol) Teardown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *MockMonoidProtocolMockRecorder) Teardown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockMonoidProtocol)(nil).Teardown), ctx)
}

// Validate mocks base method.
func (m *MockMonoidProtocol) Validate(ctx context.Context, config map[string]interface{}) (*monoidprotocol.MonoidValidateMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, config)
	ret0, _ := ret[0].(*monoidprotocol.MonoidValidateMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockMonoidProtocolMockRecorder) Validate(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockMonoidProtocol)(nil).Validate), ctx, config)
}
