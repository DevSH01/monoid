// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package monoidprotocol

import "fmt"
import "encoding/json"
import "reflect"

type MonoidMessage struct {
	// Record corresponds to the JSON schema field "record".
	Record *MonoidRecord `json:"record,omitempty"`

	// Schema corresponds to the JSON schema field "schema".
	Schema *MonoidSchemasMessage `json:"schema,omitempty"`

	// Spec corresponds to the JSON schema field "spec".
	Spec *MonoidSiloSpec `json:"spec,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type MonoidMessageType `json:"type"`

	// Validate corresponds to the JSON schema field "validate".
	Validate *MonoidValidateMessage `json:"validate,omitempty"`
}

type MonoidMessageType string

const MonoidMessageTypeRECORD MonoidMessageType = "RECORD"

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidMessage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type: required")
	}
	type Plain MonoidMessage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidMessage(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidRecord) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["data"]; !ok || v == nil {
		return fmt.Errorf("field data: required")
	}
	if v, ok := raw["schema_name"]; !ok || v == nil {
		return fmt.Errorf("field schema_name: required")
	}
	type Plain MonoidRecord
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidRecord(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidSchema) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["json_schema"]; !ok || v == nil {
		return fmt.Errorf("field json_schema: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain MonoidSchema
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidSchema(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidValidateMessage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["status"]; !ok || v == nil {
		return fmt.Errorf("field status: required")
	}
	type Plain MonoidValidateMessage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidValidateMessage(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidSchemasMessage) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["schemas"]; !ok || v == nil {
		return fmt.Errorf("field schemas: required")
	}
	type Plain MonoidSchemasMessage
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidSchemasMessage(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidValidateMessageStatus) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MonoidValidateMessageStatus {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MonoidValidateMessageStatus, v)
	}
	*j = MonoidValidateMessageStatus(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidMessageType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_MonoidMessageType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_MonoidMessageType, v)
	}
	*j = MonoidMessageType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *MonoidQueryIdentifier) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["identifier"]; !ok || v == nil {
		return fmt.Errorf("field identifier: required")
	}
	if v, ok := raw["identifier_query"]; !ok || v == nil {
		return fmt.Errorf("field identifier_query: required")
	}
	if v, ok := raw["json_schema"]; !ok || v == nil {
		return fmt.Errorf("field json_schema: required")
	}
	if v, ok := raw["schema_name"]; !ok || v == nil {
		return fmt.Errorf("field schema_name: required")
	}
	type Plain MonoidQueryIdentifier
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = MonoidQueryIdentifier(plain)
	return nil
}

const MonoidMessageTypeSCHEMA MonoidMessageType = "SCHEMA"
const MonoidMessageTypeSPEC MonoidMessageType = "SPEC"
const MonoidMessageTypeVALIDATE MonoidMessageType = "VALIDATE"

type MonoidProtocolJson struct {
	// MonoidMessage corresponds to the JSON schema field "MonoidMessage".
	MonoidMessage *MonoidMessage `json:"MonoidMessage,omitempty"`
}

type MonoidQuery struct {
	// Identifiers corresponds to the JSON schema field "identifiers".
	Identifiers []MonoidQueryIdentifier `json:"identifiers,omitempty"`
}

type MonoidQueryIdentifier struct {
	// Identifier corresponds to the JSON schema field "identifier".
	Identifier string `json:"identifier"`

	// IdentifierQuery corresponds to the JSON schema field "identifier_query".
	IdentifierQuery interface{} `json:"identifier_query"`

	// JsonSchema corresponds to the JSON schema field "json_schema".
	JsonSchema MonoidQueryIdentifierJsonSchema `json:"json_schema"`

	// SchemaGroup corresponds to the JSON schema field "schema_group".
	SchemaGroup *string `json:"schema_group,omitempty"`

	// SchemaName corresponds to the JSON schema field "schema_name".
	SchemaName string `json:"schema_name"`
}

type MonoidQueryIdentifierJsonSchema map[string]interface{}

type MonoidRecord struct {
	// Data corresponds to the JSON schema field "data".
	Data MonoidRecordData `json:"data"`

	// SchemaGroup corresponds to the JSON schema field "schema_group".
	SchemaGroup *string `json:"schema_group,omitempty"`

	// SchemaName corresponds to the JSON schema field "schema_name".
	SchemaName string `json:"schema_name"`
}

type MonoidRecordData map[string]interface{}

type MonoidSchema struct {
	// Group corresponds to the JSON schema field "group".
	Group *string `json:"group,omitempty"`

	// JsonSchema corresponds to the JSON schema field "json_schema".
	JsonSchema MonoidSchemaJsonSchema `json:"json_schema"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`
}

type MonoidSchemaJsonSchema map[string]interface{}

type MonoidSchemasMessage struct {
	// Schemas corresponds to the JSON schema field "schemas".
	Schemas []MonoidSchema `json:"schemas"`
}

type MonoidSiloSpec struct {
	// Name corresponds to the JSON schema field "name".
	Name *string `json:"name,omitempty"`

	// Spec corresponds to the JSON schema field "spec".
	Spec MonoidSiloSpecSpec `json:"spec,omitempty"`
}

type MonoidSiloSpecSpec map[string]interface{}

type MonoidValidateMessage struct {
	// Message corresponds to the JSON schema field "message".
	Message *string `json:"message,omitempty"`

	// Status corresponds to the JSON schema field "status".
	Status MonoidValidateMessageStatus `json:"status"`
}

type MonoidValidateMessageStatus string

const MonoidValidateMessageStatusFAILURE MonoidValidateMessageStatus = "FAILURE"
const MonoidValidateMessageStatusSUCCESS MonoidValidateMessageStatus = "SUCCESS"

var enumValues_MonoidMessageType = []interface{}{
	"SCHEMA",
	"RECORD",
	"SPEC",
	"VALIDATE",
}
var enumValues_MonoidValidateMessageStatus = []interface{}{
	"SUCCESS",
	"FAILURE",
}
