# generated by datamodel-codegen:
#   filename:  monoid_protocol.json
#   timestamp: 2022-10-31T06:30:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class MonoidProtocol(BaseModel):
    pass


class MonoidQueryIdentifier(BaseModel):
    schema_name: str
    schema_group: Optional[str] = None
    identifier: str
    identifier_query: Union[str, int]
    json_schema: Dict[str, Any]


class MonoidRecord(BaseModel):
    schema_name: str
    schema_group: Optional[str] = None
    data: Dict[str, Any]


class MonoidSchema(BaseModel):
    name: str
    group: Optional[str] = None
    json_schema: Dict[str, Any]


class MonoidSiloSpec(BaseModel):
    name: Optional[str] = None
    spec: Optional[Dict[str, Any]] = None


class MonoidSchemasMessage(BaseModel):
    schemas: List[MonoidSchema]


class Type(Enum):
    SCHEMA = 'SCHEMA'
    RECORD = 'RECORD'


class MonoidMessage(BaseModel):
    type: Optional[Type] = None
    record: Optional[MonoidRecord] = None
    schema_: Optional[MonoidSchemasMessage] = Field(None, alias='schema')


class MonoidQuery(BaseModel):
    identifiers: Optional[List[MonoidQueryIdentifier]] = None
